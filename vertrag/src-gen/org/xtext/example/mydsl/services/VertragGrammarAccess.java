/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class VertragGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vertrag.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//// Modell Medell Medel
		//Model:
		//	elements+=Element*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Element*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_0() { return cElementsElementParserRuleCall_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vertrag.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVertragParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHandyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//	Vertrag | Handy;
		@Override public ParserRule getRule() { return rule; }
		
		//Vertrag | Handy
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Vertrag
		public RuleCall getVertragParserRuleCall_0() { return cVertragParserRuleCall_0; }
		
		//Handy
		public RuleCall getHandyParserRuleCall_1() { return cHandyParserRuleCall_1; }
	}
	public class VertragElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vertrag.Vertrag");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cVertragKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameZEICHENFOLGETerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cDatenvolumenKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cDatenvolumenAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cDatenvolumenZEICHENFOLGETerminalRuleCall_0_3_1_0 = (RuleCall)cDatenvolumenAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cMindestvertragslaufzeitKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMindestvertragslaufzeitAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMindestvertragslaufzeitZEICHENFOLGETerminalRuleCall_1_1_0 = (RuleCall)cMindestvertragslaufzeitAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cMonatl_kostenKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMonatl_kostenAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMonatl_kostenZEICHENFOLGETerminalRuleCall_2_1_0 = (RuleCall)cMonatl_kostenAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cNetzanbieterKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNetzanbieterAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNetzanbieterZEICHENFOLGETerminalRuleCall_3_1_0 = (RuleCall)cNetzanbieterAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cUnorderedGroup.eContents().get(4);
		
		//Vertrag:
		//	'Vertrag' name=ZEICHENFOLGE '{' ('datenvolumen' datenvolumen=ZEICHENFOLGE)* & ('mindestvertragslaufzeit'
		//	mindestvertragslaufzeit=ZEICHENFOLGE)* & ('monatl_kosten' monatl_kosten=ZEICHENFOLGE)* & ('netzanbieter'
		//	netzanbieter=ZEICHENFOLGE)* &
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Vertrag' name=ZEICHENFOLGE '{' ('datenvolumen' datenvolumen=ZEICHENFOLGE)* & ('mindestvertragslaufzeit'
		//mindestvertragslaufzeit=ZEICHENFOLGE)* & ('monatl_kosten' monatl_kosten=ZEICHENFOLGE)* & ('netzanbieter'
		//netzanbieter=ZEICHENFOLGE)* & '}'
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'Vertrag' name=ZEICHENFOLGE '{' ('datenvolumen' datenvolumen=ZEICHENFOLGE)*
		public Group getGroup_0() { return cGroup_0; }
		
		//'Vertrag'
		public Keyword getVertragKeyword_0_0() { return cVertragKeyword_0_0; }
		
		//name=ZEICHENFOLGE
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ZEICHENFOLGE
		public RuleCall getNameZEICHENFOLGETerminalRuleCall_0_1_0() { return cNameZEICHENFOLGETerminalRuleCall_0_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }
		
		//('datenvolumen' datenvolumen=ZEICHENFOLGE)*
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'datenvolumen'
		public Keyword getDatenvolumenKeyword_0_3_0() { return cDatenvolumenKeyword_0_3_0; }
		
		//datenvolumen=ZEICHENFOLGE
		public Assignment getDatenvolumenAssignment_0_3_1() { return cDatenvolumenAssignment_0_3_1; }
		
		//ZEICHENFOLGE
		public RuleCall getDatenvolumenZEICHENFOLGETerminalRuleCall_0_3_1_0() { return cDatenvolumenZEICHENFOLGETerminalRuleCall_0_3_1_0; }
		
		//('mindestvertragslaufzeit' mindestvertragslaufzeit=ZEICHENFOLGE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'mindestvertragslaufzeit'
		public Keyword getMindestvertragslaufzeitKeyword_1_0() { return cMindestvertragslaufzeitKeyword_1_0; }
		
		//mindestvertragslaufzeit=ZEICHENFOLGE
		public Assignment getMindestvertragslaufzeitAssignment_1_1() { return cMindestvertragslaufzeitAssignment_1_1; }
		
		//ZEICHENFOLGE
		public RuleCall getMindestvertragslaufzeitZEICHENFOLGETerminalRuleCall_1_1_0() { return cMindestvertragslaufzeitZEICHENFOLGETerminalRuleCall_1_1_0; }
		
		//('monatl_kosten' monatl_kosten=ZEICHENFOLGE)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'monatl_kosten'
		public Keyword getMonatl_kostenKeyword_2_0() { return cMonatl_kostenKeyword_2_0; }
		
		//monatl_kosten=ZEICHENFOLGE
		public Assignment getMonatl_kostenAssignment_2_1() { return cMonatl_kostenAssignment_2_1; }
		
		//ZEICHENFOLGE
		public RuleCall getMonatl_kostenZEICHENFOLGETerminalRuleCall_2_1_0() { return cMonatl_kostenZEICHENFOLGETerminalRuleCall_2_1_0; }
		
		//('netzanbieter' netzanbieter=ZEICHENFOLGE)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'netzanbieter'
		public Keyword getNetzanbieterKeyword_3_0() { return cNetzanbieterKeyword_3_0; }
		
		//netzanbieter=ZEICHENFOLGE
		public Assignment getNetzanbieterAssignment_3_1() { return cNetzanbieterAssignment_3_1; }
		
		//ZEICHENFOLGE
		public RuleCall getNetzanbieterZEICHENFOLGETerminalRuleCall_3_1_0() { return cNetzanbieterZEICHENFOLGETerminalRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class HandyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vertrag.Handy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHandyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSystemAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSystemIDTerminalRuleCall_3_0 = (RuleCall)cSystemAssignment_3.eContents().get(0);
		private final Assignment cMarkeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMarkeIDTerminalRuleCall_4_0 = (RuleCall)cMarkeAssignment_4.eContents().get(0);
		private final Assignment cSpeicherAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSpeicherIDTerminalRuleCall_5_0 = (RuleCall)cSpeicherAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Handy:
		//	'handy' name=ID '{'
		//	system?=ID
		//	marke?=ID
		//	speicher?=ID
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'handy' name=ID '{' system?=ID marke?=ID speicher?=ID '}'
		public Group getGroup() { return cGroup; }
		
		//'handy'
		public Keyword getHandyKeyword_0() { return cHandyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//system?=ID
		public Assignment getSystemAssignment_3() { return cSystemAssignment_3; }
		
		//ID
		public RuleCall getSystemIDTerminalRuleCall_3_0() { return cSystemIDTerminalRuleCall_3_0; }
		
		//marke?=ID
		public Assignment getMarkeAssignment_4() { return cMarkeAssignment_4; }
		
		//ID
		public RuleCall getMarkeIDTerminalRuleCall_4_0() { return cMarkeIDTerminalRuleCall_4_0; }
		
		//speicher?=ID
		public Assignment getSpeicherAssignment_5() { return cSpeicherAssignment_5; }
		
		//ID
		public RuleCall getSpeicherIDTerminalRuleCall_5_0() { return cSpeicherIDTerminalRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	
	
	private final ModelElements pModel;
	private final TerminalRule tZEICHENFOLGE;
	private final ElementElements pElement;
	private final VertragElements pVertrag;
	private final HandyElements pHandy;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VertragGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.tZEICHENFOLGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vertrag.ZEICHENFOLGE");
		this.pElement = new ElementElements();
		this.pVertrag = new VertragElements();
		this.pHandy = new HandyElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Vertrag".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Modell Medell Medel
	//Model:
	//	elements+=Element*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//terminal ZEICHENFOLGE:
	//	'0'..'9' | 'a'..'z'+;
	public TerminalRule getZEICHENFOLGERule() {
		return tZEICHENFOLGE;
	}
	
	//Element:
	//	Vertrag | Handy;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Vertrag:
	//	'Vertrag' name=ZEICHENFOLGE '{' ('datenvolumen' datenvolumen=ZEICHENFOLGE)* & ('mindestvertragslaufzeit'
	//	mindestvertragslaufzeit=ZEICHENFOLGE)* & ('monatl_kosten' monatl_kosten=ZEICHENFOLGE)* & ('netzanbieter'
	//	netzanbieter=ZEICHENFOLGE)* &
	//	'}';
	public VertragElements getVertragAccess() {
		return pVertrag;
	}
	
	public ParserRule getVertragRule() {
		return getVertragAccess().getRule();
	}
	
	//Handy:
	//	'handy' name=ID '{'
	//	system?=ID
	//	marke?=ID
	//	speicher?=ID
	//	'}';
	public HandyElements getHandyAccess() {
		return pHandy;
	}
	
	public ParserRule getHandyRule() {
		return getHandyAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
